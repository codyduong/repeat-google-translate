{"version":3,"sources":["reportWebVitals.js","InputField.tsx","SetLanguage.tsx","StepTable.tsx","LanguageForm.tsx","Main.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputField","props","useState","text","setText","name","id","maxLength","onChange","event","target","value","placeholder","placeholderText","style","display","width","rows","length","LANGS","require","SetLanguage","last","setLast","selected","setSelected","shown","setShown","_langlist","Object","entries","key","push","_gridElement","gridElements","map","onClick","disabled","animate","useSpring","gridTemplateColumns","opacity","reset","zIndex","delay","reverse","overflow","maxHeight","from","type","alert","AddStep","language","other","div","StepTable","test","Steps","row","index","LanguageField","steps","setSteps","step","console","log","_styling","marginLeft","marginRight","Main","LanguageForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3975a4dc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect, useState, useRef } from \"react\"\r\n\r\nconst InputField = (props: any) => {\r\n  const [text, setText] = useState(\"\")\r\n\r\n  const handleChange = (event: any) => {\r\n    setText(event.target.value)\r\n    props.setText(event.target.value) //passes upwards\r\n  }\r\n\r\n  const formSubmit = () => {\r\n    //props.setText\r\n  }\r\n\r\n  const _inputStyling = {\r\n    display: \"block\",\r\n    width: \"40%\",\r\n    rows: \"8\",\r\n  }\r\n  return (\r\n    <> \r\n      <textarea\r\n        name=\"name\"\r\n        id=\"name\"\r\n        maxLength={5000}\r\n        onChange={handleChange}\r\n        placeholder={props.placeholderText ?? \"\"}\r\n        style = {_inputStyling}\r\n      />\r\n      {text.length}/5000\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default InputField","import { useState } from \"react\"\r\nimport { useSpring, animated } from \"react-spring\"\r\n\r\nconst LANGS = require('./languages.json')\r\n\r\nconst SetLanguage = (props: any) => {\r\n  const [last, setLast] = useState(\"\") //the priorly selected language\r\n  const [selected, setSelected] = useState(\"\") //the selected language\r\n  const [shown, setShown] = useState(false)\r\n  let _langlist = []\r\n\r\n  for (const [key, value] of Object.entries(LANGS)) {\r\n    _langlist.push({key, value})\r\n    //console.log(`${key}: ${value}`);\r\n  }\r\n\r\n  const _gridElement = {\r\n    \r\n  }\r\n  const gridElements = _langlist.map(({key, value}) => {\r\n    return (\r\n      <button \r\n        key = {key}\r\n        style = {_gridElement}\r\n        onClick = {() => setSelected(key + ' [' + value + ']')}\r\n        disabled = {!shown}\r\n      >\r\n        {key}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  const animate = useSpring({\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"15% 15% 15% 15% 15%\",\r\n    //gridTemplateRows: \"15%\", disabled to auto height\r\n    //top: '0px',\r\n    opacity: 1,\r\n    //transform: 'translate3d(0,0,0)',\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 0,\r\n    reverse: !shown,\r\n    overflow: 'hidden',\r\n    maxHeight: '100em',\r\n    from: { opacity: 0, maxHeight: '4em'},\r\n  })\r\n  \r\n  return (\r\n    <div>\r\n      Translate to: {selected} \r\n      <input\r\n        style={{zIndex: 1}}\r\n        type=\"button\"\r\n        value={!shown ? \"▼\" : \"▲\"}\r\n        onClick={() => {\r\n          setShown(!shown)\r\n        }}\r\n      />\r\n      <input\r\n        type=\"button\"\r\n        value=\"Add Step\"\r\n        onClick={() => {\r\n          if (last === selected) {\r\n            alert('Cannot translate twice in the row to the same language');\r\n            setSelected(\"\");\r\n          }\r\n          selected !== \"\" && props.AddStep({  //a dumb if statement lol\r\n            language: selected,\r\n            other: \"lol\",\r\n          })\r\n          setLast(selected)\r\n          setSelected(\"\")\r\n        }}\r\n      />\r\n      <animated.div style={animate}>\r\n        {gridElements}\r\n      </animated.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetLanguage","const StepTable = (props: any) => {\r\n  \r\n  const test = props.Steps.map((row: any, index: any) => {\r\n    return (\r\n      <div key={index}>\r\n        {row.language}\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {test}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StepTable","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\nimport StepTable from \"./StepTable\"\r\n\r\nconst LanguageField = () => {\r\n  const [steps, setSteps] = useState<object[]>([])\r\n\r\n  const removeStep = (index: Number) => {\r\n    steps: steps.filter((step, i) => {\r\n      return i !== index;\r\n    })\r\n  }\r\n\r\n  const addStep = (step: any) => {\r\n    setSteps([...steps, step])\r\n    console.log('Added step ' + step.language)\r\n    console.log(steps)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div><b>Current Steps</b><br />\r\n        <StepTable\r\n          Steps={steps}\r\n        />\r\n      </div>\r\n      <span><b>Add Step</b></span><br />\r\n      <SetLanguage\r\n        AddStep={addStep}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageField","import { useState } from \"react\"\r\nimport InputField from \"./InputField\"\r\nimport LanguageForm from \"./LanguageForm\"\r\n\r\nconst _styling = {\r\n\tmarginLeft: \"auto\",\r\n\tmarginRight: \"auto\",\r\n\twidth: \"80vw\",\r\n}\r\n\r\nconst Main = () => {\r\n\tconst [text, setText] = useState(\"\")\r\n\t\r\n\treturn (\r\n\t\t<div style={_styling}>\r\n\t\t\t<div style={{display:\"flexbox\"}}>\r\n\t\t\t\t<InputField\r\n\t\t\t\t\tsetText={setText}\r\n\t\t\t\t/>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tdisabled={true}\r\n\t\t\t\t\tplaceholder=\"Translation\"\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: \"block\",\r\n\t\t\t\t\t\twidth: \"40%\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<LanguageForm \r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Main from \"./Main\";\r\n\r\nReactDOM.render(\r\n  <Main/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}