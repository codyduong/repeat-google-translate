{"version":3,"sources":["reportWebVitals.js","InputField.tsx","SetLanguage.tsx","LanguageForm.tsx","Main.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputField","props","useState","text","setText","name","id","maxLength","onChange","event","target","value","placeholder","placeholderText","style","display","width","rows","length","LANGS","require","SetLanguage","shown","setShown","_langlist","Object","entries","key","push","_gridElement","gridElements","map","_debounce","animate","useSpring","gridTemplateColumns","top","opacity","transform","reset","zIndex","delay","reverse","immediate","maxHeight","from","onRest","onMouseEnter","onMouseLeave","div","LanguageField","_styling","marginLeft","marginRight","Main","disabled","LanguageForm","ReactDOM","render","document","getElementById"],"mappings":"86DAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cC4BCQ,EAjCI,SAACC,GAAgB,IAAD,IACTC,mBAAS,IADA,mBAC1BC,EAD0B,KACpBC,EADoB,KAiBjC,OACE,qCACE,0BACEC,KAAK,OACLC,GAAG,OACHC,UAAW,IACXC,SApBe,SAACC,GACpBL,EAAQK,EAAMC,OAAOC,OACrBV,EAAMG,QAAQK,EAAMC,OAAOC,QAmBvBC,YAAW,UAAEX,EAAMY,uBAAR,QAA2B,GACtCC,MAbgB,CACpBC,QAAS,QACTC,MAAO,MACPC,KAAM,OAYHd,EAAKe,OATR,Y,QCjBEC,EAAQC,EAAQ,IA0DPC,EAxDK,SAACpB,GAInB,IAJmC,IAAD,EACRC,oBAAS,GADD,mBAC3BoB,EAD2B,KACpBC,EADoB,KAE9BC,EAAY,GAEhB,MAA2BC,OAAOC,QAAQP,GAA1C,eAAkD,CAAC,IAAD,sBAAtCQ,EAAsC,KAAjChB,EAAiC,KAChDa,EAAUI,KAAK,CAACD,MAAKhB,UAIvB,IAAMkB,EAAe,GAGfC,EAAeN,EAAUO,KAAI,YAAmB,IAAjBJ,EAAgB,EAAhBA,IAAgB,EAAXhB,MAGxC,OACE,qBAAKG,MAASe,EAAd,SACGF,OAKHK,GAAY,EACVC,EAAUC,oBAAU,CACxBnB,QAAS,OACToB,oBAAqB,sBAErBC,IAAK,MACLC,QAAS,EACTC,UAAW,qBACXC,OAAO,EACPC,QAAS,EACTC,MAAO,IACPC,SAAUpB,EAEVqB,UAAWX,EACXY,UAAW,MACXC,KAAM,CAAER,QAAS,EAAGO,UAAW,MAAON,UAAW,0BACjDQ,OAAQ,WACNd,GAAaV,KAIjB,OACE,sBACEyB,aAAc,kBAAMxB,GAAS,IAC7ByB,aAAc,kBAAMzB,GAAS,IAF/B,kBAKE,cAAC,WAAS0B,IAAV,CAAcnC,MAAOmB,EAArB,SACGH,QCvCMoB,EAbO,WAAO,IAAD,EACAhD,qBADA,gCAEEA,sBAFF,6BAI1B,OACE,8BACE,cAAC,EAAD,OCLAiD,EAAW,CAChBC,WAAY,OACZC,YAAa,OACbrC,MAAO,QA2BOsC,EAxBF,WAAO,IAAD,EACMpD,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,KAGlB,OACC,sBAAKU,MAAOqC,EAAZ,UACC,sBAAKrC,MAAO,CAACC,QAAQ,WAArB,UACC,cAAC,EAAD,CACCX,QAASA,IAEV,8BACC,0BACCmD,UAAU,EACV3C,YAAY,cACZD,MAAOR,SAIV,cAACqD,EAAD,QCrBHC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BrE,M","file":"static/js/main.0cd79eb6.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect, useState, useRef } from \"react\"\r\n\r\nconst InputField = (props: any) => {\r\n  const [text, setText] = useState(\"\")\r\n\r\n  const handleChange = (event: any) => {\r\n    setText(event.target.value)\r\n    props.setText(event.target.value) //passes upwards\r\n  }\r\n\r\n  const formSubmit = () => {\r\n    //props.setText\r\n  }\r\n\r\n  const _inputStyling = {\r\n    display: \"block\",\r\n    width: \"40%\",\r\n    rows: \"8\",\r\n  }\r\n  return (\r\n    <> \r\n      <textarea\r\n        name=\"name\"\r\n        id=\"name\"\r\n        maxLength={5000}\r\n        onChange={handleChange}\r\n        placeholder={props.placeholderText ?? \"\"}\r\n        style = {_inputStyling}\r\n      />\r\n      {text.length}/5000\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default InputField","import { useState } from \"react\"\r\nimport { useSpring, animated } from \"react-spring\"\r\n\r\nconst LANGS = require('./languages.json')\r\n\r\nconst SetLanguage = (props: any) => {\r\n  const [shown, setShown] = useState(false)\r\n  let _langlist = []\r\n\r\n  for (const [key, value] of Object.entries(LANGS)) {\r\n    _langlist.push({key, value})\r\n    //console.log(`${key}: ${value}`);\r\n  }\r\n\r\n  const _gridElement = {\r\n    \r\n  }\r\n  const gridElements = _langlist.map(({key, value}) => {\r\n\r\n\r\n    return (\r\n      <div style = {_gridElement}>\r\n        {key}\r\n      </div>\r\n    )\r\n  })\r\n\r\n  let _debounce = false\r\n  const animate = useSpring({\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"15% 15% 15% 15% 15%\",\r\n    //gridTemplateRows: \"15%\", disabled to auto height\r\n    top: '0px',\r\n    opacity: 1,\r\n    transform: 'translate3d(0,0,0)',\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 250,\r\n    reverse: !shown,\r\n    //overflow: 'hidden',\r\n    immediate: _debounce,\r\n    maxHeight: '4em',\r\n    from: { opacity: 0, maxHeight: '0em', transform: 'translate3d(0,-30px,0)' },\r\n    onRest: () => {\r\n      _debounce = !shown ? true : false\r\n    }\r\n  })\r\n  \r\n  return (\r\n    <div\r\n      onMouseEnter={() => setShown(true)}\r\n      onMouseLeave={() => setShown(false)}\r\n    >\r\n      Hover\r\n      <animated.div style={animate}>\r\n        {gridElements}\r\n      </animated.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetLanguage","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\n\r\nconst LanguageField = () => {\r\n  const [input, setInput] = useState()\r\n  const [output, setOutput] = useState()\r\n\r\n  return (\r\n    <div>\r\n      <SetLanguage \r\n        \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageField","import { useState } from \"react\"\r\nimport InputField from \"./InputField\"\r\nimport LanguageForm from \"./LanguageForm\"\r\n\r\nconst _styling = {\r\n\tmarginLeft: \"auto\",\r\n\tmarginRight: \"auto\",\r\n\twidth: \"80vw\",\r\n}\r\n\r\nconst Main = () => {\r\n\tconst [text, setText] = useState(\"\")\r\n\t\r\n\treturn (\r\n\t\t<div style={_styling}>\r\n\t\t\t<div style={{display:\"flexbox\"}}>\r\n\t\t\t\t<InputField\r\n\t\t\t\t\tsetText={setText}\r\n\t\t\t\t/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tdisabled={true}\r\n\t\t\t\t\t\tplaceholder=\"Translation\"\r\n\t\t\t\t\t\tvalue={text}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<LanguageForm \r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Main from \"./Main\";\r\n\r\nReactDOM.render(\r\n  <Main/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}