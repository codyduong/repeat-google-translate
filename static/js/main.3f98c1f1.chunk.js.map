{"version":3,"sources":["reportWebVitals.js","SetLanguage.tsx","TextFields.tsx","StepTable.tsx","useWindowDimensions.ts","LanguageForm.tsx","Main.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LANGS","require","SetLanguage","props","useState","last","setLast","lang","setLang","code","setCode","shown","setShown","_langlist","Input","push","key","value","Object","entries","setLanguage","style_gridElement","justifySelf","textOverflow","gridElements","map","style","onClick","input","setSelected","disabled","animate","useSpring","opacity","reset","zIndex","delay","reverse","overflow","height","maxHeight","from","type","alert","addStep","language","langCode","filter","i","div","className","InputField","text","setText","style_outerDivTextArea","width","margin","style_textArea","display","gridTemplateColumns","gridColumnGap","marginLeft","marginRight","name","id","maxLength","onChange","event","target","placeholder","placeholderText","length","StepTable","table_content","steps","row","index","removeStep","console","log","getWindowDimensions","window","innerWidth","innerHeight","LanguageField","setSteps","stepsShown","setStepsShown","_width","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","style_stepTable","config","clamp","step","_styling","fontSize","Main","padding","ReactDOM","render","document","getElementById"],"mappings":"w9DAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8BCHRQ,EAAQC,EAAQ,IAiGPC,EA/FK,SAACC,GAAgB,IAAD,EACVC,mBAAS,IADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAEVF,mBAAS,IAFC,mBAE3BG,EAF2B,KAErBC,EAFqB,OAGVJ,mBAAS,IAHC,mBAG3BK,EAH2B,KAGrBC,EAHqB,OAIRN,oBAAS,GAJD,mBAI3BO,EAJ2B,KAIpBC,EAJoB,KAK9BC,EAAmB,IACT,IAAdV,EAAMW,OAAgBD,EAAUE,KAAK,CAACC,IAAK,mBAAoBC,MAAO,SAEtE,cAA2BC,OAAOC,QAAQnB,GAA1C,eAAkD,CAAC,IAAD,sBAAtCgB,EAAsC,KAAjCC,EAAiC,KAChDJ,EAAUE,KAAK,CAACC,MAAKC,UAIvB,IAAMG,EAAc,WAA2C,IAA1Cb,EAAyC,uDAA1B,GAAIE,EAAsB,uDAAP,GACzCD,EAAL,KAAPD,EAAoBA,EAAgB,IAC7B,KAAPE,EAAYC,EAAQD,GAAQD,EAAQ,KAGhCa,EAAoB,CACxBC,YAAa,UACbC,aAAc,UAEVC,EAAeX,EAAUY,KAAI,YAAmB,IAAjBT,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MAQxC,OACE,wBAEES,MAASL,EACTM,QAAW,kBAVbP,EAAYJ,EAAK,GAAGC,SACF,IAAdd,EAAMyB,OACRzB,EAAM0B,YAAYb,KASlBc,UAAanB,EAJf,SAMGK,GALMA,MAUPe,EAAUC,oBAAU,CAExBC,QAAS,EAETC,OAAO,EACPC,QAAS,EACTC,MAAO,EACPC,SAAU1B,EACV2B,SAAU,SACVC,OAAQ,OACRC,UAAW,OACXC,KAAM,CAAER,QAAS,EAAGM,OAAQ,SAG9B,OACE,8CAC2B,IAAdpC,EAAMyB,MAAgB,KAAO,OAD1C,KACoDrB,EAClD,uBACEmB,MAAO,CAACS,OAAQ,GAChBO,KAAK,SACLzB,MAAQN,EAAc,SAAN,SAChBgB,QAAS,WACPf,GAAUD,OAGC,IAAdR,EAAMyB,MAAgB,uBACrBc,KAAK,SACLzB,MAAM,WACNU,QAAS,WACM,KAATpB,EACFoC,MAAM,wBAECtC,IAASE,GAChBoC,MAAM,0DACNvB,MAEAjB,EAAMyC,QAAQ,CACZC,SAAUtC,EACVuC,SAAUrC,IAEZI,EAAYA,EAAUkC,QAAO,SAACxC,EAAMyC,GAAP,OAAanC,EAAUmC,KAAKzC,KACzDD,EAAQC,GACRa,QAGD,KACL,cAAC,WAAS6B,IAAV,CAAcC,UAAU,WAAWxB,MAAOK,EAA1C,SACGP,QCnCM2B,EAzDI,SAAChD,GAAgB,IAAD,IACTC,mBAAS,IADA,mBAC1BgD,EAD0B,KACpBC,EADoB,OAEDjD,mBAAS,IAFR,mBAEhByB,GAFgB,WAgB3ByB,EAAyB,CAC7BC,MAAO,MACPC,OAAQ,MAEJC,EAAiB,CACrBC,QAAS,eACTH,MAAO,OACPhB,OAAQ,QAEV,OACE,qCACE,cAAC,EAAD,CACEzB,OAAO,EACPe,YAAaA,IAEf,sBAAKH,MAtBU,CACjBgC,QAAS,OACTC,oBAAqB,UACrBC,cAAe,MACfC,WAAY,OACZC,YAAa,QAiBX,UACE,sBAAKpC,MAAS4B,EAAd,UACE,0BACES,KAAK,OACLC,GAAG,OACHC,UAAW,IACXC,SAjCW,SAACC,GACpBd,EAAQc,EAAMC,OAAOnD,OACrBd,EAAMkD,QAAQc,EAAMC,OAAOnD,QAgCnBoD,YAAW,UAAElE,EAAMmE,uBAAR,QAA2B,GACtC5C,MAAO+B,IAERL,EAAKmB,OATR,WAWA,qBAAK7C,MAAS4B,EAAd,SACE,0BACExB,UAAU,EACVuC,YAAY,cACZpD,MAAOmC,EACP1B,MAAO+B,a,QCpBJe,EA/BG,SAACrE,GACjB,IAAMsE,EAAgBtE,EAAMuE,MAAMjD,KAAI,SAACkD,EAAUC,GAC/C,OACE,+BACE,oBAAIlD,MAAO,CAAC6B,MAAO,QAAnB,SACGoB,EAAI9B,WAEP,6BACG8B,EAAI7B,WAEP,6BACE,wBAEEnB,QAAS,WAAQxB,EAAM0E,WAAWD,IAFpC,cACOD,EAAI9B,cATN+B,MAqBb,OAFAE,QAAQC,IAAIN,GAGV,gCACGA,K,MCtBP,SAASO,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACL1B,MAH2B,EACrB2B,WAGN3C,OAJ2B,EACF4C,aCE7B,IAmEeC,EAnEO,WAAO,IAAD,EACAhF,mBAAmB,IADnB,mBACnBsE,EADmB,KACZW,EADY,OAEUjF,oBAAS,GAFnB,mBAEnBkF,EAFmB,KAEPC,EAFO,KAiBpBC,EDZO,WAAgC,IAAD,EACIpF,mBAC9C4E,KAF0C,mBACrCS,EADqC,KACnBC,EADmB,KAc5C,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBV,KAItB,OADAC,OAAOY,iBAAiB,SAAUD,GAC3B,kBAAMX,OAAOa,oBAAoB,SAAUF,MACjD,IAEIH,ECFQM,GAAsBxC,MAC/ByC,EAAkBhE,oBAAU,CAEhCC,QAAS,EACTO,UAAWgD,GAAU,IAAOA,GAAU,IAAM,MAAQ,OAAU,OAC9D/C,KAAM,CAAER,QAAS,EAAGO,UAAW,OAC/BN,OAAO,EACPC,QAAS,EACTC,MAAO,EACPC,SAAUiD,EACVW,OAAQ,CACNC,OAAO,KAIX,OACE,sBAAKhD,UAAU,OAAf,UACE,sBAAKxB,MAAO,CAACgC,QAAS,gBAAtB,UAAuC,8CAAoB,uBACzD,wBACE/B,QAAW,WACT4D,GAAeD,IAFnB,UAKgB,IAAbA,EAAoB,cAAW,gBAElC,wBACE3D,QAAW,WA5BD,IAAf+C,EAAMH,OAAc5B,MAAM,kBAAoBA,MAAM,UA2BjD,6BAKA,qBAAKO,UAAU,mBAAf,SACE,cAAC,WAASD,IAAV,CAAcC,UAAU,mBAAmBxB,MAAOsE,EAAlD,SACE,cAAC,EAAD,CACEtB,MAAOA,EACPG,WA/CO,SAACD,GAClBS,EAASX,EAAM3B,QAAO,SAACoD,EAAMnD,GAAP,OAAaA,IAAI4B,gBAmDrC,sBAAKlD,MAAO,CAACgC,QAAS,gBAAtB,UACE,+BAAM,2CAAsB,uBAC5B,cAAC,EAAD,CACE9B,OAAO,EACPgB,QApDQ,SAACuD,GACfd,EAAS,GAAD,mBAAKX,GAAL,CAAYyB,eCZlBC,EAAW,CAChBvC,WAAY,OACZC,YAAa,OACbP,MAAO,OACP8C,SAAU,QAuBIC,EAlBF,WAAO,IAAD,EACMlG,mBAAS,IADf,mBACLiD,GADK,WAGlB,OACC,sBAAK3B,MAAO0E,EAAZ,UACC,oBAAI1E,MAAO,CAAC6E,QAAS,MAAO/C,OAAQ,OAApC,8BACA,qBAAK9B,MAAO,CAACgC,QAAQ,WAArB,SACC,cAAC,EAAD,CACCL,QAASA,MAGX,cAAC,EAAD,QClBHmD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BpH,M","file":"static/js/main.3f98c1f1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useState } from \"react\"\r\nimport { useSpring, animated } from \"react-spring\"\r\nimport \"./SetLanguage.css\"\r\n\r\nconst LANGS = require('./languages.json')\r\n\r\nconst SetLanguage = (props: any) => {\r\n  const [last, setLast] = useState(\"\") //the priorly selected language\r\n  const [lang, setLang] = useState(\"\") //the selected language\r\n  const [code, setCode] = useState(\"\")\r\n  const [shown, setShown] = useState(false)\r\n  let _langlist: any[] = []\r\n  props.Input===true && _langlist.push({key: \"Detect Language \", value: \"auto\"})\r\n\r\n  for (const [key, value] of Object.entries(LANGS)) {\r\n    _langlist.push({key, value})\r\n    //console.log(`${key}: ${value}`);\r\n  }\r\n\r\n  const setLanguage = (lang: string = \"\", code: string = \"\") => {\r\n    lang!==\"\" ? setLang(lang) : setLang(\"\")\r\n    code!==\"\" ? setCode(code) : setLang(\"\")\r\n  }\r\n  \r\n  const style_gridElement = {\r\n    justifySelf: \"stretch\",\r\n    textOverflow: \"hidden\",\r\n  }\r\n  const gridElements = _langlist.map(({key, value}) => {\r\n    const _onClickFunc = () => {\r\n      setLanguage(key, ''+value)\r\n      if (props.input===true) {\r\n        props.setSelected(key)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button \r\n        key = {key}\r\n        style = {style_gridElement}\r\n        onClick = {() => _onClickFunc()}\r\n        disabled = {!shown}\r\n      >\r\n        {key}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  const animate = useSpring({\r\n    //top: '0px',\r\n    opacity: 1,\r\n    //transform: 'translate3d(0,0,0)',\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 0,\r\n    reverse: !shown,\r\n    overflow: 'hidden',\r\n    height: \"30em\",\r\n    maxHeight: '100%',\r\n    from: { opacity: 0, height: '0em'},\r\n  })\r\n  \r\n  return (\r\n    <div>\r\n      Translate {props.input===false ? \"to\" : \"from\"}: {lang} \r\n      <input\r\n        style={{zIndex: 1}}\r\n        type=\"button\"\r\n        value={!shown ? \"▼\" : \"▲\"}\r\n        onClick={() => {\r\n          setShown(!shown)\r\n        }}\r\n      />\r\n      {props.input===false ? <input\r\n        type=\"button\"\r\n        value=\"Add Step\"\r\n        onClick={() => {\r\n          if (lang === \"\") {\r\n            alert(\"No language selected\")\r\n          }\r\n          else if (last === lang) {\r\n            alert('Cannot translate twice in the row to the same language')\r\n            setLanguage()\r\n          } else {\r\n            props.addStep({\r\n              language: lang,\r\n              langCode: code,\r\n            })\r\n            _langlist = _langlist.filter((lang, i) => _langlist[i]!==lang)\r\n            setLast(lang)\r\n            setLanguage()\r\n          }\r\n        }}\r\n      /> : null}\r\n      <animated.div className=\"langgrid\" style={animate}>\r\n        {gridElements}\r\n      </animated.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetLanguage","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\n\r\nconst InputField = (props: any) => {\r\n  const [text, setText] = useState(\"\")\r\n  const [selected, setSelected] = useState(\"\")\r\n\r\n  const handleChange = (event: any) => {\r\n    setText(event.target.value)\r\n    props.setText(event.target.value) //passes upwards\r\n  }\r\n\r\n  const style_grid = {\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"50% 50%\",\r\n    gridColumnGap: \"5px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  }\r\n  const style_outerDivTextArea = {\r\n    width: \"99%\",\r\n    margin: \"1%\",\r\n  }\r\n  const style_textArea = {\r\n    display: \"inline-block\",\r\n    width: \"100%\",\r\n    height: \"12vh\",\r\n  }\r\n  return (\r\n    <> \r\n      <SetLanguage\r\n        Input={true}\r\n        setSelected={setSelected}\r\n      />\r\n      <div style={style_grid}>\r\n        <div style = {style_outerDivTextArea}>\r\n          <textarea\r\n            name=\"name\"\r\n            id=\"name\"\r\n            maxLength={5000}\r\n            onChange={handleChange}\r\n            placeholder={props.placeholderText ?? \"\"}\r\n            style={style_textArea}\r\n          />\r\n          {text.length}/5000\r\n        </div>\r\n        <div style = {style_outerDivTextArea}>\r\n          <textarea\r\n            disabled={true}\r\n            placeholder=\"Translation\"\r\n            value={text}\r\n            style={style_textArea}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default InputField","const StepTable = (props: any) => { \r\n  const table_content = props.steps.map((row: any, index: any) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td style={{width: \"12em\"}}>\r\n          {row.language}\r\n        </td>\r\n        <td>\r\n          {row.langCode}\r\n        </td>\r\n        <td>\r\n          <button\r\n            key={row.language}\r\n            onClick={() => { props.removeStep(index) }}\r\n          >\r\n            X\r\n        </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  console.log(table_content)\r\n\r\n  return (\r\n    <table>\r\n      {table_content}\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default StepTable","//yoinked: https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\nimport StepTable from \"./StepTable\"\r\nimport { useSpring, animated } from \"react-spring\"\r\nimport \"./LanguageForm.css\"\r\nimport useWindowDimensions from \"./useWindowDimensions\"\r\n\r\nconst LanguageField = () => {\r\n  const [steps, setSteps] = useState<object[]>([])\r\n  const [stepsShown, setStepsShown] = useState(true)\r\n\r\n  const removeStep = (index: Number) => {\r\n    setSteps(steps.filter((step, i) => i!==index))\r\n  }\r\n\r\n  const addStep = (step: any) => {\r\n    setSteps([...steps, step])\r\n    // console.log('Added step ' + step.language)\r\n    // console.log(steps)\r\n  }\r\n\r\n  const onSubmitTranslate = () => {\r\n    (steps.length===0) ? alert(\"No steps loser\") : alert(\"Loser\")\r\n  }\r\n  const _width = useWindowDimensions().width\r\n  const style_stepTable = useSpring({\r\n    //overflow: \"hidden\",\r\n    opacity: 1,\r\n    maxHeight: _width <= 992 ? (_width <= 600 ? \"5em\" : \"10em\") : \"30em\",\r\n    from: { opacity: 0, maxHeight: '0em'},\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 0,\r\n    reverse: !stepsShown,\r\n    config: {\r\n      clamp: true //this removes overshooting\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      <div style={{display: \"inline-block\"}}><b>Current Steps</b><br />\r\n        <button\r\n          onClick = {() => {\r\n            setStepsShown(!stepsShown)\r\n          }}\r\n        >\r\n          {stepsShown===true ? \"Hide ▲\" : \"Show ▼\"}\r\n        </button>\r\n        <button\r\n          onClick = {() => onSubmitTranslate()}\r\n        >\r\n          Translate Steps\r\n        </button>\r\n        <div className=\"scrollstep_outer\">\r\n          <animated.div className=\"scrollstep_inner\" style={style_stepTable}>\r\n            <StepTable\r\n              steps={steps}\r\n              removeStep={removeStep}\r\n            />\r\n          </animated.div>\r\n        </div>\r\n      </div>\r\n      <div style={{display: \"inline-block\"}}>\r\n        <span><b>Add Step</b></span><br />\r\n        <SetLanguage\r\n          input={false}\r\n          addStep={addStep}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageField","import { useState } from \"react\"\r\nimport TextField from \"./TextFields\"\r\nimport LanguageForm from \"./LanguageForm\"\r\n\r\nconst _styling = {\r\n\tmarginLeft: \"auto\",\r\n\tmarginRight: \"auto\",\r\n\twidth: \"90vw\",\r\n\tfontSize: \"18px\",\r\n}\r\n\r\n//https://translate.google.com/?sl=LANGCODEIN&tl=LANGCODEOUT&text=INPUT&op=translate\r\n\r\nconst Main = () => {\r\n\tconst [text, setText] = useState(\"\")\r\n\t\r\n\treturn (\r\n\t\t<div style={_styling}>\r\n\t\t\t<h2 style={{padding: \"5px\", margin: \"0px\"}}>TRANSLATE ∞</h2>\r\n\t\t\t<div style={{display:\"flexbox\"}}>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tsetText={setText}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<LanguageForm \r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Main from \"./Main\";\r\n\r\nReactDOM.render(\r\n  <Main/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}