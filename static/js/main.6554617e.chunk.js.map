{"version":3,"sources":["reportWebVitals.js","SetLanguage.tsx","TextFields.tsx","StepTable.tsx","useWindowDimensions.ts","LanguageForm.tsx","Main.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LANGS","require","SetLanguage","props","steps","useState","lang","setLang","code","setCode","shown","setShown","_langlist","input","push","key","value","Object","entries","setLanguage","style_gridElement","justifySelf","textOverflow","zIndex","gridElements","map","style","onClick","setSelected","disabled","length","language","animate","useSpring","opacity","reset","delay","reverse","overflow","height","maxHeight","from","type","alert","addStep","langCode","filter","i","div","className","TextFields","text","setText","name","maxLength","onChange","event","target","placeholder","placeholderText","StepTable","table_content","row","index","removeStep","getWindowDimensions","window","width","innerWidth","innerHeight","LanguageField","setSteps","stepsShown","setStepsShown","style_stepTable","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","config","clamp","display","step","_styling","marginLeft","marginRight","fontSize","Main","padding","margin","ReactDOM","render","document","getElementById"],"mappings":"kgEAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8BCFRQ,EAAQC,EAAQ,IAyGPC,EAvGK,SAACC,GACLA,EAAMC,MAApB,IADkC,EAEVC,mBAAS,IAFC,mBAE3BC,EAF2B,KAErBC,EAFqB,OAGVF,mBAAS,IAHC,mBAG3BG,EAH2B,KAGrBC,EAHqB,OAIRJ,oBAAS,GAJD,mBAI3BK,EAJ2B,KAIpBC,EAJoB,KAK9BC,EAAmB,IACT,IAAdT,EAAMU,OAAgBD,EAAUE,KAAK,CAACC,IAAK,mBAAoBC,MAAO,SAEtE,cAA2BC,OAAOC,QAAQlB,GAA1C,eAAkD,CAAC,IAAD,sBAAtCe,EAAsC,KAAjCC,EAAiC,KAChDJ,EAAUE,KAAK,CAACC,MAAKC,UAIvB,IAAMG,EAAc,WAA2C,IAA1Cb,EAAyC,uDAA1B,GAAIE,EAAsB,uDAAP,GACzCD,EAAL,KAAPD,EAAoBA,EAAgB,IAC7B,KAAPE,EAAYC,EAAQD,GAAQD,EAAQ,KAGhCa,EAAoB,CACxBC,YAAa,UACbC,aAAc,SACdC,OAAQpB,EAAMU,MAAQ,EAAI,GAEtBW,EAAeZ,EAAUa,KAAI,YAAmB,IAAD,EAAhBV,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MASxC,OACE,wBAEEU,MAASN,EACTO,QAAW,kBAXbR,EAAYJ,EAAK,GAAGC,SACF,IAAdb,EAAMU,QACRF,GAAS,GACTR,EAAMyB,YAAYb,MASlBc,UACEnB,KACEP,EAAMC,QACJ,UAAAD,EAAMC,MAAMD,EAAMC,MAAM0B,OAAS,UAAjC,eAAqCC,YAAahB,EAP1D,SAYGA,GAXMA,MAgBPiB,EAAUC,oBAAU,CAExBC,QAAS,EAETC,OAAO,EACPC,MAAO,EACPC,SAAU3B,EACV4B,SAAU,SACVC,OAAQ,OACRC,UAAW,OACXC,KAAM,CAAEP,QAAS,EAAGK,OAAQ,SAG9B,OACE,8CAC2B,IAAdpC,EAAMU,MAAgB,KAAO,OAD1C,KACoDP,EAClD,uBACEoB,MAAO,CAACH,OAAQ,GAChBmB,KAAK,SACL1B,MAAQN,EAAc,SAAN,SAChBiB,QAAS,WACPhB,GAAUD,OAGC,IAAdP,EAAMU,MAAgB,uBACrB6B,KAAK,SACL1B,MAAM,WACNa,SAAkB,KAAPvB,EACXqB,QAAS,WAAO,IAAD,EACA,KAATrB,EACFqC,MAAM,yBAEC,UAAAxC,EAAMC,MAAMD,EAAMC,MAAM0B,OAAO,UAA/B,eAAmCC,YAAazB,GACvDqC,MAAM,0DACNxB,MAEAhB,EAAMyC,QAAQ,CACZb,SAAUzB,EACVuC,SAAUrC,IAEZI,EAAYA,EAAUkC,QAAO,SAACxC,EAAMyC,GAAP,OAAanC,EAAUmC,KAAKzC,KAEzDa,QAGD,KACL,cAAC,WAAS6B,IAAV,CAAcC,UAAU,WAAWvB,MAAOM,EAA1C,SACGR,QC3DM0B,G,MAzCI,SAAC/C,GAAgB,IAAD,IACTE,mBAAS,IADA,mBAC1B8C,EAD0B,KACpBC,EADoB,OAED/C,mBAAS,IAFR,mBAEhBuB,GAFgB,WASjC,OACE,qCACE,qBAAKqB,UAAU,uBAAf,SACE,cAAC,EAAD,CACEpC,OAAO,EACPe,YAAaA,MAGjB,sBAAKqB,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,0BACEI,KAAK,aACLC,UAAW,IACXC,SAlBW,SAACC,GACpBJ,EAAQI,EAAMC,OAAOzC,OACrBb,EAAMiD,QAAQI,EAAMC,OAAOzC,QAiBnB0C,YAAW,UAAEvD,EAAMwD,uBAAR,QAA2B,KAEvCR,EAAKrB,OAPR,WASA,qBAAKmB,UAAU,mBAAf,SACE,0BACEI,KAAK,oBACLxB,UAAU,EACV6B,YAAY,cACZ1C,MAAOmC,c,QCHJS,G,MA/BG,SAACzD,GACjB,IAAM0D,EAAgB1D,EAAMC,MAAMqB,KAAI,SAACqC,EAAUC,GAC/C,OACE,sBAAiBd,UAAU,mBAA3B,UACE,qBAAKA,UAAU,aAAf,SACGa,EAAI/B,WAEP,qBAAKkB,UAAU,aAAf,SACGa,EAAIjB,WAEP,wBACEnB,MAAO,CAACa,OAAQ,SAEhBZ,QAAS,WAAQxB,EAAM6D,WAAWD,IAHpC,cAEOD,EAAI/B,YATHgC,MAmBd,OAAgC,IAAzBF,EAAc/B,OACnB,qBAAKmB,UAAU,YAAf,SACGY,IAGH,kD,MCzBJ,SAASI,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGN7B,OAJ2B,EACF8B,aCG7B,IAkEeC,EAlEO,WAAO,IAAD,EACAjE,mBAA0B,IAD1B,mBACnBD,EADmB,KACZmE,EADY,OAEUlE,oBAAS,GAFnB,mBAEnBmE,EAFmB,KAEPC,EAFO,KAkBpBC,GDdO,WAAgC,IAAD,EACIrE,mBAC9C4D,KAF0C,mBACrCU,EADqC,KACnBC,EADmB,KAc5C,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBX,KAItB,OADAC,OAAOa,iBAAiB,SAAUD,GAC3B,kBAAMZ,OAAOc,oBAAoB,SAAUF,MACjD,IAEIH,ECDQM,GAAsBd,MACblC,oBAAU,CAEhCC,QAAS,EACTM,UAA4C,OAC5CC,KAAM,CAAEP,QAAS,EAAGM,UAAW,OAC/BL,OAAO,EACPZ,QAAS,EACTa,MAAO,EACPC,SAAUmC,EACVU,OAAQ,CACNC,OAAO,MAIX,OACE,sBAAKlC,UAAU,OAAf,UACE,sBAAKvB,MAAO,CAAC0D,QAAS,gBAAtB,UAAuC,8CAAoB,uBACzD,wBACEzD,QAAW,WACT8C,GAAeD,IAFnB,UAKgB,IAAbA,EAAoB,cAAW,gBAElC,wBACE7C,QAAW,WA5BD,IAAfvB,EAAM0B,OAAca,MAAM,YAAcA,MAAM,QA2B3C,6BAKA,cAAC,WAASK,IAAV,CAActB,MAAOgD,EAArB,SACE,cAAC,EAAD,CACEtE,MAAOA,EACP4D,WA9CS,SAACD,GAClBQ,EAASnE,EAAM0C,QAAO,SAACuC,EAAMtC,GAAP,OAAaA,IAAIgB,cAiDrC,sBAAKrC,MAAO,CAAC0D,QAAS,gBAAtB,UACE,+BAAM,2CAAsB,uBAC5B,cAAC,EAAD,CACEvE,OAAO,EACPT,MAAOA,EACPwC,QAnDQ,SAACyC,GACfd,EAAS,GAAD,mBAAKnE,GAAL,CAAYiF,eCblBC,EAAW,CAChBC,WAAY,OACZC,YAAa,OACbrB,MAAO,OACPsB,SAAU,QAuBIC,EAlBF,WAAO,IAAD,EACMrF,mBAAS,IADf,mBACL+C,GADK,WAGlB,OACC,sBAAK1B,MAAO4D,EAAZ,UACC,oBAAI5D,MAAO,CAACiE,QAAS,MAAOC,OAAQ,OAApC,8BACA,qBAAKlE,MAAO,CAAC0D,QAAQ,WAArB,SACC,cAAC,EAAD,CACChC,QAASA,MAGX,cAAC,EAAD,QClBHyC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BzG,M","file":"static/js/main.6554617e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useState } from \"react\"\r\nimport { useSpring, animated } from \"react-spring\"\r\nimport \"./SetLanguage.css\"\r\nimport stepInterface from \"./Interfaces/stepInterface\"\r\n\r\nconst LANGS = require('./languages.json')\r\n\r\nconst SetLanguage = (props: any) => {\r\n  const steps = props.steps\r\n  const [lang, setLang] = useState(\"\") //the selected language\r\n  const [code, setCode] = useState(\"\")\r\n  const [shown, setShown] = useState(false)\r\n  let _langlist: any[] = []\r\n  props.input===true && _langlist.push({key: \"Detect Language \", value: \"auto\"})\r\n\r\n  for (const [key, value] of Object.entries(LANGS)) {\r\n    _langlist.push({key, value})\r\n    //console.log(`${key}: ${value}`);\r\n  }\r\n\r\n  const setLanguage = (lang: string = \"\", code: string = \"\") => {\r\n    lang!==\"\" ? setLang(lang) : setLang(\"\")\r\n    code!==\"\" ? setCode(code) : setLang(\"\")\r\n  }\r\n  \r\n  const style_gridElement = {\r\n    justifySelf: \"stretch\",\r\n    textOverflow: \"hidden\",\r\n    zIndex: props.input ? 2 : 1,\r\n  }\r\n  const gridElements = _langlist.map(({key, value}) => {\r\n    const _onClickFunc = () => {\r\n      setLanguage(key, ''+value)\r\n      if (props.input===true) {\r\n        setShown(false)\r\n        props.setSelected(key)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button \r\n        key = {key}\r\n        style = {style_gridElement}\r\n        onClick = {() => _onClickFunc()}\r\n        disabled = {\r\n          shown ? (\r\n            props.steps ? (\r\n              props.steps[props.steps.length - 1]?.language === key\r\n            ) : false\r\n          ) : true\r\n        }\r\n      >\r\n        {key}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  const animate = useSpring({\r\n    //top: '0px',\r\n    opacity: 1,\r\n    //transform: 'translate3d(0,0,0)',\r\n    reset: false,\r\n    delay: 0,\r\n    reverse: !shown,\r\n    overflow: 'hidden',\r\n    height: \"30em\",\r\n    maxHeight: '100%',\r\n    from: { opacity: 0, height: '0em'},\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      Translate {props.input===false ? \"to\" : \"from\"}: {lang} \r\n      <input\r\n        style={{zIndex: 1}}\r\n        type=\"button\"\r\n        value={!shown ? \"▼\" : \"▲\"}\r\n        onClick={() => {\r\n          setShown(!shown)\r\n        }}\r\n      />\r\n      {props.input===false ? <input\r\n        type=\"button\"\r\n        value=\"Add Step\"\r\n        disabled= {lang===\"\"} \r\n        onClick={() => {\r\n          if (lang === \"\") {\r\n            alert(\"No language selected\")\r\n          }\r\n          else if (props.steps[props.steps.length-1]?.language === lang) {\r\n            alert('Cannot translate twice in the row to the same language')\r\n            setLanguage()\r\n          } else {\r\n            props.addStep({\r\n              language: lang,\r\n              langCode: code,\r\n            })\r\n            _langlist = _langlist.filter((lang, i) => _langlist[i]!==lang)\r\n            //setLast(lang)\r\n            setLanguage()\r\n          }\r\n        }}\r\n      /> : null}\r\n      <animated.div className=\"langgrid\" style={animate}>\r\n        {gridElements}\r\n      </animated.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetLanguage","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\nimport \"./TextFields.css\"\r\n\r\nconst TextFields = (props: any) => {\r\n  const [text, setText] = useState(\"\")\r\n  const [selected, setSelected] = useState(\"\")\r\n\r\n  const handleChange = (event: any) => {\r\n    setText(event.target.value)\r\n    props.setText(event.target.value) //passes upwards\r\n  }\r\n\r\n  return (\r\n    <> \r\n      <div className=\"hiddenOverFlowSelect\">\r\n        <SetLanguage\r\n          input={true}\r\n          setSelected={setSelected}\r\n        />\r\n      </div>\r\n      <div className=\"textgrid\">\r\n        <div className=\"textareasurround\">\r\n          <textarea\r\n            name=\"Input Text\"\r\n            maxLength={5000}\r\n            onChange={handleChange}\r\n            placeholder={props.placeholderText ?? \"\"}\r\n          />\r\n          {text.length}/5000\r\n        </div>\r\n        <div className=\"textareasurround\">\r\n          <textarea\r\n            name=\"Translated Result\"\r\n            disabled={true}\r\n            placeholder=\"Translation\"\r\n            value={text}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default TextFields","import \"./StepTable.css\"\r\n\r\nconst StepTable = (props: any) => { \r\n  const table_content = props.steps.map((row: any, index: any) => {\r\n    return (\r\n      <div key={index} className=\"outer-step-table\">\r\n        <div className=\"inline-div\">\r\n          {row.language}\r\n        </div>\r\n        <div className=\"inline-div\">\r\n          {row.langCode}\r\n        </div>\r\n        <button\r\n          style={{height: \"1.5em\"}}\r\n          key={row.language}\r\n          onClick={() => { props.removeStep(index) }}\r\n        >\r\n          X\r\n        </button>\r\n      </div >\r\n    )\r\n  })\r\n\r\n\r\n  return table_content.length !== 0 ? (\r\n    <div className=\"faketable\">\r\n      {table_content}\r\n    </div>\r\n  ) : (\r\n    <>No steps</>\r\n  )\r\n}\r\n\r\nexport default StepTable","//yoinked: https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\nimport StepTable from \"./StepTable\"\r\nimport { useSpring, animated } from \"react-spring\"\r\nimport \"./LanguageForm.css\"\r\nimport useWindowDimensions from \"./useWindowDimensions\"\r\nimport stepInterface from \"./Interfaces/stepInterface\"\r\n\r\nconst LanguageField = () => {\r\n  const [steps, setSteps] = useState<stepInterface[]>([])\r\n  const [stepsShown, setStepsShown] = useState(true)\r\n\r\n  const removeStep = (index: Number) => {\r\n    setSteps(steps.filter((step, i) => i!==index))\r\n  }\r\n\r\n  const addStep = (step: any) => {\r\n    setSteps([...steps, step])\r\n    // console.log('Added step ' + step.language)\r\n    // console.log(steps)\r\n  }\r\n\r\n  const onSubmitTranslate = () => {\r\n    (steps.length===0) ? alert(\"No steps\") : alert(\"WIP\")\r\n  }\r\n  const _width = useWindowDimensions().width\r\n  const style_stepTable = useSpring({\r\n    //overflow: \"hidden\",\r\n    opacity: 1,\r\n    maxHeight: _width <= 992 ? (_width <= 600 ? \"30em\" : \"30em\") : \"30em\",\r\n    from: { opacity: 0, maxHeight: '0em'},\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 0,\r\n    reverse: !stepsShown,\r\n    config: {\r\n      clamp: true //this removes overshooting\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      <div style={{display: \"inline-block\"}}><b>Current Steps</b><br />\r\n        <button\r\n          onClick = {() => {\r\n            setStepsShown(!stepsShown)\r\n          }}\r\n        >\r\n          {stepsShown===true ? \"Hide ▲\" : \"Show ▼\"}\r\n        </button>\r\n        <button\r\n          onClick = {() => onSubmitTranslate()}\r\n        >\r\n          Translate Steps\r\n        </button>\r\n        <animated.div style={style_stepTable}>\r\n          <StepTable\r\n            steps={steps}\r\n            removeStep={removeStep}\r\n          />\r\n        </animated.div>\r\n      </div>\r\n      <div style={{display: \"inline-block\"}}>\r\n        <span><b>Add Step</b></span><br />\r\n        <SetLanguage\r\n          input={false}\r\n          steps={steps}\r\n          addStep={addStep}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageField","import { useState } from \"react\"\r\nimport TextField from \"./TextFields\"\r\nimport LanguageForm from \"./LanguageForm\"\r\n\r\nconst _styling = {\r\n\tmarginLeft: \"auto\",\r\n\tmarginRight: \"auto\",\r\n\twidth: \"90vw\",\r\n\tfontSize: \"18px\",\r\n}\r\n\r\n//https://translate.google.com/?sl=LANGCODEIN&tl=LANGCODEOUT&text=INPUT&op=translate\r\n\r\nconst Main = () => {\r\n\tconst [text, setText] = useState(\"\")\r\n\t\r\n\treturn (\r\n\t\t<div style={_styling}>\r\n\t\t\t<h2 style={{padding: \"5px\", margin: \"0px\"}}>TRANSLATE ∞</h2>\r\n\t\t\t<div style={{display:\"flexbox\"}}>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tsetText={setText}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<LanguageForm \r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Main from \"./Main\";\r\n\r\nReactDOM.render(\r\n  <Main/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}