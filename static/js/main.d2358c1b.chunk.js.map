{"version":3,"sources":["reportWebVitals.js","SetLanguage.tsx","TextFields.tsx","StepTable.tsx","LanguageForm.tsx","Main.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LANGS","require","SetLanguage","props","useState","last","setLast","lang","setLang","code","setCode","shown","setShown","_langlist","Input","push","key","value","Object","entries","setLanguage","_gridElement","gridElements","map","style","onClick","input","setSelected","disabled","animate","useSpring","display","gridAutoFlow","gridTemplateColumns","gridTemplateRows","opacity","reset","zIndex","delay","reverse","overflow","maxHeight","from","type","alert","addStep","language","langCode","filter","i","div","InputField","text","setText","style_outerDivTextArea","width","margin","style_textArea","height","gridColumnGap","marginLeft","marginRight","name","id","maxLength","onChange","event","target","placeholder","placeholderText","length","StepTable","test","steps","row","index","removeStep","LanguageField","setSteps","stepsShown","setStepsShown","style_stepTable","className","step","_styling","fontSize","Main","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d2358c1b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useState } from \"react\"\r\nimport { useSpring, animated } from \"react-spring\"\r\n\r\nconst LANGS = require('./languages.json')\r\n\r\nconst SetLanguage = (props: any) => {\r\n  const [last, setLast] = useState(\"\") //the priorly selected language\r\n  const [lang, setLang] = useState(\"\") //the selected language\r\n  const [code, setCode] = useState(\"\")\r\n  const [shown, setShown] = useState(false)\r\n  let _langlist: any[] = []\r\n  props.Input===true && _langlist.push({key: \"Detect Language \", value: \"auto\"})\r\n\r\n  for (const [key, value] of Object.entries(LANGS)) {\r\n    _langlist.push({key, value})\r\n    //console.log(`${key}: ${value}`);\r\n  }\r\n\r\n  const setLanguage = (lang: string = \"\", code: string = \"\") => {\r\n    lang!==\"\" ? setLang(lang) : setLang(\"\")\r\n    code!==\"\" ? setCode(code) : setLang(\"\")\r\n  }\r\n  \r\n  const _gridElement = {}\r\n  const gridElements = _langlist.map(({key, value}) => {\r\n    const _onClickFunc = () => {\r\n      setLanguage(key, ''+value)\r\n      if (props.input===true) {\r\n        props.setSelected(key)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button \r\n        key = {key}\r\n        style = {_gridElement}\r\n        onClick = {() => _onClickFunc()}\r\n        disabled = {!shown}\r\n      >\r\n        {key}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  const animate = useSpring({\r\n    display: \"grid\",\r\n    gridAutoFlow: \"column\",\r\n    gridTemplateColumns: \"16.66% 16.66% 16.66% 16.66% 16.66% 16.66%\",\r\n    gridTemplateRows: \"5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5%\",\r\n    //top: '0px',\r\n    opacity: 1,\r\n    //transform: 'translate3d(0,0,0)',\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 0,\r\n    reverse: !shown,\r\n    overflow: 'hidden',\r\n    maxHeight: '100em',\r\n    from: { opacity: 0, maxHeight: '0em'},\r\n  })\r\n  \r\n  return (\r\n    <div>\r\n      Translate {props.input===false ? \"to\" : \"from\"}: {lang} \r\n      <input\r\n        style={{zIndex: 1}}\r\n        type=\"button\"\r\n        value={!shown ? \"▼\" : \"▲\"}\r\n        onClick={() => {\r\n          setShown(!shown)\r\n        }}\r\n      />\r\n      {props.input===false ? <input\r\n        type=\"button\"\r\n        value=\"Add Step\"\r\n        onClick={() => {\r\n          if (last === lang) {\r\n            if (lang === \"\") {\r\n              alert(\"No language selected\")\r\n            } else {\r\n              alert('Cannot translate twice in the row to the same language')\r\n              setLanguage()\r\n            }\r\n          } else {\r\n            props.addStep({\r\n              language: lang,\r\n              langCode: code,\r\n            })\r\n            _langlist = _langlist.filter((lang, i) => _langlist[i]!==lang)\r\n          }\r\n          setLast(lang)\r\n          setLanguage()\r\n        }}\r\n      /> : null}\r\n      <animated.div style={animate}>\r\n        {gridElements}\r\n      </animated.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetLanguage","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\n\r\nconst InputField = (props: any) => {\r\n  const [text, setText] = useState(\"\")\r\n  const [selected, setSelected] = useState(\"\")\r\n\r\n  const handleChange = (event: any) => {\r\n    setText(event.target.value)\r\n    props.setText(event.target.value) //passes upwards\r\n  }\r\n\r\n  const style_grid = {\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"50% 50%\",\r\n    gridColumnGap: \"5px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  }\r\n  const style_outerDivTextArea = {\r\n    width: \"99%\",\r\n    margin: \"1%\",\r\n  }\r\n  const style_textArea = {\r\n    display: \"inline-block\",\r\n    width: \"100%\",\r\n    height: \"12vh\",\r\n  }\r\n  return (\r\n    <> \r\n      <SetLanguage\r\n        Input={true}\r\n        setSelected={setSelected}\r\n      />\r\n      <div style={style_grid}>\r\n        <div style = {style_outerDivTextArea}>\r\n          <textarea\r\n            name=\"name\"\r\n            id=\"name\"\r\n            maxLength={5000}\r\n            onChange={handleChange}\r\n            placeholder={props.placeholderText ?? \"\"}\r\n            style={style_textArea}\r\n          />\r\n          {text.length}/5000\r\n        </div>\r\n        <div style = {style_outerDivTextArea}>\r\n          <textarea\r\n            disabled={true}\r\n            placeholder=\"Translation\"\r\n            value={text}\r\n            style={style_textArea}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default InputField","const StepTable = (props: any) => {\r\n  \r\n  const test = props.steps.map((row: any, index: any) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td style={{width: \"12em\"}}>\r\n          {row.language}\r\n        </td>\r\n        <td>\r\n          {row.langCode}\r\n        </td>\r\n        <td>\r\n          <button\r\n            key={row.language}\r\n            onClick={() => { props.removeStep(index) }}\r\n          >\r\n            X\r\n        </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <table>\r\n      {test}\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default StepTable","import { useState } from \"react\"\r\nimport SetLanguage from \"./SetLanguage\"\r\nimport StepTable from \"./StepTable\"\r\nimport { useSpring, animated } from \"react-spring\"\r\nimport \"./LanguageForm.css\"\r\n\r\nconst LanguageField = () => {\r\n  const [steps, setSteps] = useState<object[]>([])\r\n  const [stepsShown, setStepsShown] = useState(true)\r\n\r\n  const removeStep = (index: Number) => {\r\n    setSteps(steps.filter((step, i) => i!==index))\r\n  }\r\n\r\n  const addStep = (step: any) => {\r\n    setSteps([...steps, step])\r\n    // console.log('Added step ' + step.language)\r\n    // console.log(steps)\r\n  }\r\n\r\n  const onSubmitTranslate = () => {\r\n    (steps.length===0) ? alert(\"No steps loser\") : alert(\"Loser\")\r\n  }\r\n\r\n  const style_stepTable = useSpring({\r\n    overflow: \"hidden\",\r\n    opacity: 1,\r\n    maxHeight: '100em',\r\n    from: { opacity: 0, maxHeight: '0em'},\r\n    reset: false,\r\n    zIndex: -1,\r\n    delay: 0,\r\n    reverse: !stepsShown,\r\n  })\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      <div style={{display: \"inline-block\"}}><b>Current Steps</b><br />\r\n        <button\r\n          onClick = {() => {\r\n            setStepsShown(!stepsShown)\r\n          }}\r\n        >\r\n          {stepsShown===true ? \"Hide\" : \"Show\"}\r\n        </button>\r\n        <button\r\n          onClick = {() => onSubmitTranslate()}\r\n        >\r\n          Translate Steps\r\n        </button>\r\n        <animated.div style={style_stepTable}>\r\n          <StepTable\r\n            steps={steps}\r\n            removeStep={removeStep}\r\n          />\r\n        </animated.div>\r\n      </div>\r\n      <div style={{display: \"inline-block\"}}>\r\n        <span><b>Add Step</b></span><br />\r\n        <SetLanguage\r\n          input={false}\r\n          addStep={addStep}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageField","import { useState } from \"react\"\r\nimport TextField from \"./TextFields\"\r\nimport LanguageForm from \"./LanguageForm\"\r\n\r\nconst _styling = {\r\n\tmarginLeft: \"auto\",\r\n\tmarginRight: \"auto\",\r\n\twidth: \"90vw\",\r\n\tfontSize: \"18px\",\r\n}\r\n\r\n//https://translate.google.com/?sl=LANGCODEIN&tl=LANGCODEOUT&text=INPUT&op=translate\r\n\r\nconst Main = () => {\r\n\tconst [text, setText] = useState(\"\")\r\n\t\r\n\treturn (\r\n\t\t<div style={_styling}>\r\n\t\t\t<h2 style={{padding: \"5px\", margin: \"0px\"}}>TRANSLATE ∞</h2>\r\n\t\t\t<div style={{display:\"flexbox\"}}>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tsetText={setText}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<LanguageForm \r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Main from \"./Main\";\r\n\r\nReactDOM.render(\r\n  <Main/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}